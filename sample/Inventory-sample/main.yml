- hosts: localhost
  #vars:
  #url: "https://get.helm.sh/helm-v2.16.8-linux-amd64.tar.gz"
  become: yes
  tasks:
    - name: download helm from url
      get_url:
        url: "{{ helm_url }}"
        dest: "{{ playbook_dir }}/{{ helm_url | basename }}"
    - name: extract tar file
      unarchive:
        src: "{{ helm_url | basename }}"
        dest: "{{ playbook_dir }}"
    - name: remove tar file
      file:
        path: "{{ helm_url | basename }}"
        state: absent

- hosts: master
  become: yes
  become_user: "{{ service_user }}"
  become_method: su
  tasks:
    - name: moving package {{ helm_package }} to {{ helm_install_dir }}
      copy:
        src: "{{ helm_package }}"
        dest: "{{ helm_install_dir }}"
        mode: a+x

    - name: check if moved file exist
      stat:
        path: "{{ helm_install_dir }}"
      register: helm_package_transfer_status

    - name: create tiller service account
      shell: kubectl apply -f {{helm_service_account_create_path}}
      register: tiller_account_create
      ignore_errors: True
      changed_when: tiller_account_create.rc == 0 or tiller_account_create.rc == 1
      failed_when: tiller_account_create.rc == 2

    - name: helm admin role-binding for cluster
      shell: kubectl apply -f {{ helm_cluster_role_binding_path }}
      ignore_errors: True
      register: role_bind_status
      changed_when: role_bind_status.rc == 0 or role_bind_status.rc == 1
      failed_when: role_bind_status.rc == 2

    - name: Initiate Helm Server
      command: helm init --service-account {{ helm_service_account }} --wait
      when: helm_package_transfer_status.stat.exists

    - name: deploy tiller and add service account to spec.template.spec
      shell: kubectl patch deploy --namespace {{ service_namespaces }} {{ cluster_service_account }}-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"{{ cluster_service_account }}"}}}}'
    - name: update helm repository
      command: helm repo update
      register: helm_update
      changed_when: "'Update Completed' in helm_update.stdout"

    - name: install prom-operator under monitoring namespaces
      shell: helm install --name prom-operator stable/prometheus-operator --namespace monitoring
      register: operator_result
      failed_when: '"failed to download" in operator_result.stderr'
      changed_when: operator_result.rc == 0 or  '"already exists" in operator_result.stderr'
